#include <CytronMotorDriver.h>
#include <Servo.h>
/*
Code for Semi-Auto R1 Robot
*/
#define Seed1_DOWN 0
#define Seed1_UP 1
#define Seed1_STOP 2

#define Seed2_DOWN 3
#define Seed2_UP 4
#define Seed2_STOP 5

#define Ball_IN 6
#define Ball_OUT 7
#define Ball_STOP 8

Servo BLmotor1; //bldc motor1
Servo BLmotor2; //bldc motor2

unsigned long BallTh = 0;
unsigned long actionStartTime = 0;
unsigned long actionDuration = 100;

const int bldc = 900; //arming bldc
int BLDC; //for increasing speed

int Speed = -100; //Speed for base
int iSpeed = 100;
int SlowSpeed = -45;
int SlowiSpeed = 45;

int TSpeed = 45;
int TiSpeed = -45;
int TSlowSpeed = 25;
int TSlowiSpeed = -25;

int Seed1Speed = 50; //Speed for first array of seeds (3)
int Seed1iSpeed = -40;

int Seed2Speed = 50; //Speed for second array of seeds (3)
int Seed2iSpeed = -40;

int BallSpeed = 255; //Speed for ball putting to throw
int BalliSpeed = -255;

char x; //character for recieving from the transmiter

int LimitUPSeed1 = 19; // limit switch pair for seed array no. 1
int LimitDOWNSeed1 = 21;

int LimitUPSeed2 = 21; //limit switch pair for seed array no. 2
int LimitDOWNSeed2 = 18;

int LimitBallIN = 2; //limit switch pair for Ball grip
int LimitBallOUT = 20;

int Seed1_state = Seed1_STOP; //starting as no movement in Seed1 array
int Seed2_state = Seed2_STOP; //starting as no movement in Seed2 array
int Ball_state = Ball_STOP;

int Ball_pick = 41; //relay for ball picking

int Seed1 = 39; //relay for seed array 1
int Seed2 = 43; //relay for seed array 2
int Seed3 = 35; //relay for seed array 1 single
int Seed4 = 53; //relay for seed array 2 single

CytronMD motor1(PWM_DIR, 7, 23); //for base 4 motors
CytronMD motor2(PWM_DIR, 9, 27);
CytronMD motor3(PWM_DIR, 8, 29);
CytronMD motor4(PWM_DIR, 6, 25); 

CytronMD Seed2Motor(PWM_DIR, 5, 24); //for Seed 2 motors
CytronMD Seed1Motor(PWM_DIR, 4, 22);

CytronMD BallMotor(PWM_DIR, 3, 49); //for Ball insert


void setup() {
  Serial.begin(9600);
  Serial3.begin(115200);

  pinMode(Ball_pick, OUTPUT);
  pinMode(Seed1, OUTPUT);
  pinMode(Seed2, OUTPUT);
  pinMode(Seed3, OUTPUT);
  pinMode(Seed4, OUTPUT);
  pinMode(LimitUPSeed1, INPUT_PULLUP);
  pinMode(LimitDOWNSeed1, INPUT_PULLUP);
  pinMode(LimitUPSeed2, INPUT_PULLUP);
  pinMode(LimitDOWNSeed2, INPUT_PULLUP);
  pinMode(LimitBallIN, INPUT_PULLUP);
  pinMode(LimitBallOUT, INPUT_PULLUP);

  digitalWrite(Ball_pick, LOW);
  digitalWrite(Seed1, LOW);
  digitalWrite(Seed2, LOW);
  

  BLmotor1.attach(11);
  BLmotor2.attach(12);

  BLmotor1.write(bldc);
  BLmotor2.write(bldc);
  BLDC=bldc;
}

void loop() {

  if (BLDC <= 899){
    BLDC = 900;
  }
  else if(BLDC >= 1551){
    BLDC = 1550;
  }



  if (Seed1_state == Seed1_STOP){
    Seed1Motor.setSpeed(0);
  }
  else if (Seed1_state == Seed1_DOWN){
    Seed1Motor.setSpeed(Seed1iSpeed);

  }
  else if (Seed1_state == Seed1_UP){
    Seed1Motor.setSpeed(Seed1Speed);

  }

  if (Seed2_state == Seed2_STOP){
    Seed2Motor.setSpeed(0);
  }
  else if (Seed2_state == Seed2_DOWN){
    Seed2Motor.setSpeed(Seed2iSpeed);

  }
  else if (Seed2_state == Seed2_UP){
    Seed2Motor.setSpeed(Seed2Speed);

  }

  if (Ball_state == Ball_STOP){
    BallMotor.setSpeed(0);
    
  }
  else if (Ball_state == Ball_IN){
    
    BallMotor.setSpeed(BalliSpeed);

  }
  else if (Ball_state == Ball_OUT){
    BallMotor.setSpeed(BallSpeed);

  }

//Main controlled code starts here!!!!!

  BLmotor1.write(BLDC); //bldc armed alwaysssssssssssssssssssss
  BLmotor2.write(BLDC + 50);
  
  


Main();
delay(0);
}

void Main(){
  int limitUPSeed1State = digitalRead(LimitUPSeed1);
  int limitDOWNSeed1State = digitalRead(LimitDOWNSeed1);
  int limitUPSeed2State = digitalRead(LimitUPSeed2);
  int limitDOWNSeed2State = digitalRead(LimitDOWNSeed2);
  int limitBallINState = digitalRead(LimitBallIN);
  int limitBallOUTState = digitalRead(LimitBallOUT);

  unsigned long currentTime = millis();
  
if (Serial3.available() > 0){
    x=Serial3.read();
    

    if (x=='y'){
      actionStartTime = currentTime;
      digitalWrite(Ball_pick, LOW);
      digitalWrite(Seed1, LOW);
      
    }

    else if (x=='z'){
     
      
      
    }

    else if (x=='e'){
      
      digitalWrite(Seed3, LOW);
      
    }

    else if (x=='g'){
      actionStartTime = currentTime;
      digitalWrite(Seed4, LOW);
      digitalWrite(Seed2, LOW);
      
    }

    else if (x=='k'){
      actionStartTime = currentTime;
      digitalWrite(Seed1, LOW);
      
    }

    else if (x=='p'){
      actionStartTime = currentTime;
      digitalWrite(Seed2, LOW);
      
    }

    if (currentTime - actionStartTime >= actionDuration) {
      digitalWrite(Seed1, HIGH);
      digitalWrite(Seed2, HIGH);
    
      digitalWrite(Seed4, HIGH);
      digitalWrite(Ball_pick, HIGH);
      }


  if (x=='F'){
      Baseforward();
    } 
    else if (x=='f'){
      BaseSlowforward();
    }

    if (x=='b'){
      BaseSlowback();
    }
    else if (x=='B'){
      Baseback();
    }

    if (x=='L'){
      Baseleft();
    }
    else if (x=='l'){
      BaseSlowleft();
    }
    else if (x=='R'){
      Baseright();
    }
    else if (x=='r'){
      BaseSlowright();
    }

    if (x=='A'){
      Baseclock();
    }
    else if (x=='a'){
      BaseSlowclock();
    }
    else if (x=='C'){
      Baseanticlock();
    }
    else if (x=='c'){
      BaseSlowanticlock();
    }

    if (x=='E'){
      BaseUpright();
    }
    

    if (x=='I'){
      BaseUpleft();
    }
    

    if (x=='J'){
      BaseDownright();
    }
    

    if (x=='Z'){
      BaseDownleft();
    }
    
    if(limitBallINState == LOW){
      Ball_state = Ball_OUT;
      digitalWrite(Seed3, LOW);
    }

    else if (x=='D'){
      Ball_state = Ball_IN;
      digitalWrite(Seed3, HIGH);
    }

    if(x!='D' && limitBallOUTState == LOW){
      Ball_state = Ball_STOP;
      delay(1);
    }
    
    else if (x=='U'){
      Ball_state = Ball_OUT;
    }
    
    if (x=='H'){
      Basestop();
    }



    if (x=='i'){
      BLDC += 50;
      //Serial.println("BLDC + 50");
    }
    else if (x=='q'){
      BLDC += -50;
      //Serial.println("BLDC - 50");
    }
    else if (x=='W'){
      BLDC = 1000;
      
    }
    else if (x=='N'){
      BLDC = 1400;
      
    }
    


    if (x=='K'){
        Seed1_state = Seed1_UP;
      }
      else if (x=='P'){
        Seed1_state = Seed1_DOWN;
      }

      if (x=='V'){
        Seed2_state = Seed2_UP;
      }
      else if (x=='O'){
        Seed2_state = Seed2_DOWN;
      }

      if (limitUPSeed1State == LOW && x == 'K'){
        Seed1_state = Seed1_STOP;
      }
      else if (limitDOWNSeed1State == LOW && x == 'P'){
        Seed1_state = Seed1_STOP;
      }

      if (limitUPSeed2State == LOW && x == 'V'){
        Seed2_state = Seed2_STOP;
      }
      else if (limitDOWNSeed2State == LOW && x == 'O'){
        Seed2_state = Seed2_STOP;
      }
  }
}
void Baseforward() {
  motor1.setSpeed(Speed);
  motor2.setSpeed(Speed);
  motor3.setSpeed(0);
  motor4.setSpeed(0);
  Serial.println("forward");
}

void BaseSlowforward(){
  motor1.setSpeed(SlowSpeed);
  motor2.setSpeed(SlowSpeed);
  motor3.setSpeed(0);
  motor4.setSpeed(0);
  Serial.println("forward");
}

void Baseback() {
  motor1.setSpeed(iSpeed);  
  motor2.setSpeed(iSpeed);
  motor3.setSpeed(0);
  motor4.setSpeed(0);
  Serial.println("back");
}

void BaseSlowback(){
  motor1.setSpeed(SlowiSpeed);  
  motor2.setSpeed(SlowiSpeed);
  motor3.setSpeed(0);
  motor4.setSpeed(0);
  Serial.println("backward");
}

void Baseleft() {
  motor1.setSpeed(0);
  motor2.setSpeed(0);
  motor3.setSpeed(iSpeed);  
  motor4.setSpeed(iSpeed);
  Serial.println("left");
}

void BaseSlowleft(){
  motor1.setSpeed(0);
  motor2.setSpeed(0);
  motor3.setSpeed(SlowiSpeed);  
  motor4.setSpeed(SlowiSpeed);
  Serial.println("left");
}

void Baseright() {
  motor1.setSpeed(0);
  motor2.setSpeed(0);
  motor3.setSpeed(Speed);  
  motor4.setSpeed(Speed); 
  Serial.println("right");
}

void BaseSlowright() {
  motor1.setSpeed(0);
  motor2.setSpeed(0);
  motor3.setSpeed(SlowSpeed);  
  motor4.setSpeed(SlowSpeed);
  Serial.println("right");
}

void Baseclock() {
  motor1.setSpeed(TSpeed);
  motor2.setSpeed(TiSpeed);
  motor3.setSpeed(TSpeed);
  motor4.setSpeed(TiSpeed);
  Serial.println("clock");
}

void BaseSlowclock(){
  motor1.setSpeed(TSlowSpeed);
  motor2.setSpeed(TSlowiSpeed);
  motor3.setSpeed(TSlowSpeed);
  motor4.setSpeed(TSlowiSpeed);
  Serial.println("clock");
}

void Baseanticlock() {
  motor1.setSpeed(TiSpeed);
  motor2.setSpeed(TSpeed);
  motor3.setSpeed(TiSpeed);
  motor4.setSpeed(TSpeed);
  Serial.println("clock");
}

void BaseSlowanticlock() {
  motor1.setSpeed(TSlowiSpeed);
  motor2.setSpeed(TSlowSpeed);
  motor3.setSpeed(TSlowiSpeed);
  motor4.setSpeed(TSlowSpeed);
}

void Basestop(){
  motor1.setSpeed(0);
  motor2.setSpeed(0);
  motor3.setSpeed(0);
  motor4.setSpeed(0);
  
  Seed1_state = Seed1_STOP;
  Seed2_state = Seed2_STOP;
}

void BaseUpright(){
  motor1.setSpeed(Speed);
  motor2.setSpeed(Speed);
  motor3.setSpeed(Speed);
  motor4.setSpeed(Speed);
}

void BaseUpleft(){
  motor1.setSpeed(Speed);
  motor2.setSpeed(Speed);
  motor3.setSpeed(iSpeed);
  motor4.setSpeed(iSpeed);
}

void BaseDownright(){
  motor1.setSpeed(iSpeed);
  motor2.setSpeed(iSpeed);
  motor3.setSpeed(Speed);
  motor4.setSpeed(Speed);
}

void BaseDownleft(){
  motor1.setSpeed(iSpeed);
  motor2.setSpeed(iSpeed);
  motor3.setSpeed(iSpeed);
  motor4.setSpeed(iSpeed);
}

void SlowBaseUpright(){
  motor1.setSpeed(SlowSpeed);
  motor2.setSpeed(SlowSpeed);
  motor3.setSpeed(SlowSpeed);
  motor4.setSpeed(SlowSpeed);
}

void SlowBaseUpleft(){
  motor1.setSpeed(SlowSpeed);
  motor2.setSpeed(SlowSpeed);
  motor3.setSpeed(SlowiSpeed);
  motor4.setSpeed(SlowiSpeed);
}

void SlowBaseDownright(){
  motor1.setSpeed(SlowiSpeed);
  motor2.setSpeed(SlowiSpeed);
  motor3.setSpeed(SlowSpeed);
  motor4.setSpeed(SlowSpeed);
}

void SlowBaseDownleft(){
  motor1.setSpeed(SlowiSpeed);
  motor2.setSpeed(SlowiSpeed);
  motor3.setSpeed(SlowiSpeed);
  motor4.setSpeed(SlowiSpeed);
}



/*
Coded by Ghanishth Khoria
EAP Team
Robocon 2024
*/
